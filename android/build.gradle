buildscript {
	ext.kotlin_version = "1.9.22"

	repositories {
		google()
		mavenCentral()
	}
	dependencies {
		classpath "com.android.tools.build:gradle:8.1.0"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
	}
}


repositories {
	google()
	mavenCentral()
}

apply plugin: 'kotlin-android'
apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

def ndkLevel = 30
def targets = [ "aarch64-linux-android", "armv7a-linux-androideabi", "i686-linux-android", "x86_64-linux-android" ]

android {
	ndkVersion "23.1.7779620"
	compileSdkVersion 33
	defaultConfig {
		applicationId "com.tailscale.ipn"
		minSdkVersion 22
		targetSdkVersion 33
		versionCode 198
		versionName "1.59.53-t0f042b981-g1017015de26"
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17
	}
	kotlinOptions {
		jvmTarget = "17"
	}
	flavorDimensions "version"
	productFlavors {
		fdroid {
			// The fdroid flavor contains only free dependencies and is suitable
			// for the F-Droid app store.
		}
		play {
			// The play flavor contains all features and is for the Play Store.
		}
		newapp {
			// In progress! 
		}
	}

	// This attaches the custom task to the preBuild task of newapp
    applicationVariants.all { variant ->
        if (variant.flavorName == 'newapp') {
			targets.each { target -> variant.preBuild.dependsOn tasks["jniLib-$target"] }
        }
    }

    namespace 'com.tailscale.ipn'
	sourceSets {
		main {
            res.srcDirs = ['src/main/res']
			java.srcDirs = ['src/main/java']
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
		fdroid {
            manifest.srcFile 'src/app/AndroidManifest.xml'
			java{
				srcDir 'src/app'
			}
		}
		play {
            manifest.srcFile 'src/app/AndroidManifest.xml'
			java{
				srcDir 'src/app'
			}
		}
		newapp{
			java{
				srcDir 'src/newapp/java'
			}
			jniLibs.srcDirs = ['src/main/jniLibs']
            manifest.srcFile 'src/newapp/AndroidManifest.xml'
		}
    }
}

dependencies {
	implementation "androidx.core:core:1.9.0"
    implementation 'androidx.core:core-ktx:1.9.0'
	implementation "androidx.browser:browser:1.5.0"
	implementation "androidx.security:security-crypto:1.1.0-alpha06"
	implementation "androidx.work:work-runtime:2.8.1"
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" 
	testImplementation "junit:junit:4.12"
	// implementation ':ipn@aar'

	// Non-free dependencies.
	playImplementation 'com.google.android.gms:play-services-auth:20.7.0'
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem

def hostTag
if (os.isLinux()) {
	// No aarch64 prebuilts.
	hostTag = "linux-x86_64"
} else if (os.isMacOsX()) {
	// Darwin binaries are fat binaries, so this runs on aarch64 too.
	hostTag = "darwin-x86_64"
} else if (os.isWindows()) {
	// No aarch64 prebuilts.
	hostTag = "windows-x86_64"
} else {
	throw new GradleException("Unsupported host OS: $os")
}
def toolchainDir = "${android.ndkDirectory}/toolchains/llvm/prebuilt/${hostTag}"

def targetToGoArch = [
	"aarch64-linux-android": "arm64",
	"armv7a-linux-androideabi": "arm",
	"i686-linux-android": "386",
	"x86_64-linux-android": "amd64"
]

def targetToAbi = [
	"aarch64-linux-android": "arm64-v8a",
	"armv7a-linux-androideabi": "armeabi-v7a",
	"i686-linux-android": "x86",
	"x86_64-linux-android": "x86_64"
]

targets.each { target ->
	tasks.create("jniLib-$target", Exec) {
		environment "CC", "${toolchainDir}/bin/$target$ndkLevel-clang"
		commandLine 'sh', '-c', "GOOS=android GOARM=7 GOARCH=${targetToGoArch[target]} CGO_ENABLED=1 go build -buildmode=c-shared -ldflags=\"-w -s\" -o src/main/jniLibs/${targetToAbi[target]}/repository.so ../cmd/tailscale"
	}
}